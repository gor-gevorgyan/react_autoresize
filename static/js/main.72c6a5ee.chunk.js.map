{"version":3,"sources":["components/criteria/AddCriteria.js","components/vendorRow/vendor/index.js","components/vendorRow/index.js","components/ContentData.js","App.js","serviceWorker.js","index.js"],"names":["Option","Select","AddCriteria","props","span","defaultValue","onSelect","addRow","value","defaultData","require","TextArea","Input","Vendor","useState","newVendorBtn","setNewVendorBtn","redact","setRedact","type","setType","key","setKey","vendor","data","setData","imageRef","useRef","score","openImageUploader","current","click","uploadNewImage","event","files","target","length","reader","FileReader","onloadend","icon","result","readAsDataURL","addNewVendor","edit","addVendor","setItemData","currentType","currentKey","setChangedItemData","className","onMouseMove","onMouseLeave","input","min","max","step","size","onChange","e","showRedact","src","PlusCircleOutlined","onClick","ref","description","history","founded","investors","founders","width","strokeColor","from","to","percent","parseFloat","format","vendorData","VendorRow","vendors","setVendor","direction","map","index","ContentData","rows","setRows","offset","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.72c6a5ee.chunk.js","sourcesContent":["import React from \"react\";\nimport {Select, Row, Col} from \"antd\";\n\nconst {Option} = Select;\n\nfunction AddCriteria(props) {\n    function addLine() {\n        props.addRow();\n    }\n\n    return (\n        <Row>\n            <Col span={20}>\n                <Select defaultValue=\"add\" onSelect={addLine}>\n                    <Option value=\"add\">Add</Option>\n                </Select>\n            </Col>\n        </Row>\n    );\n}\n\nexport default AddCriteria;","import React, {useState, useRef} from \"react\";\nimport {\n    Image,\n    Button,\n    Input,\n    InputNumber,\n    Progress\n} from \"antd\";\nimport {\n    PlusCircleOutlined\n} from '@ant-design/icons';\n\nimport \"./index.scss\";\n\nconst defaultData = require('./emptyVendor.json');\nconst {TextArea} = Input;\n\nexport default function Vendor(props) {\n    let [newVendorBtn, setNewVendorBtn] = useState(false);\n    let [redact, setRedact] = useState(false);\n    let [type, setType] = useState('');\n    let [key, setKey] = useState('');\n    const [data, setData] = useState(props.vendor);\n    const imageRef = useRef(null);\n\n    function emptyImage() {\n        return <div className=\"empty-img\">\n            <PlusCircleOutlined className=\"plus-icon\" onClick={openImageUploader} />\n            <input type=\"file\" ref={imageRef} onChange={uploadNewImage}/>\n            </div>;\n    }\n\n    const openImageUploader = () => imageRef.current.click();\n\n\n    function uploadNewImage(event) {\n        let files = event.target.files;\n\n        if (files.length > 0) {\n            let reader = new FileReader();\n            reader.onloadend = function() {\n                setData({...data, icon: reader.result});\n            }\n            reader.readAsDataURL(files[0]);\n        } else {\n            setData({...data, icon: ''});\n        }\n    }\n\n    function image() {\n        return <Image className=\"image\" src={data.icon}></Image>;\n    }\n\n    function addVendorBtn() {\n        return <Button type=\"link\" onClick={addNewVendor}>Add New Vendor</Button>;\n    }\n\n    function addNewVendor(event) {\n        setNewVendorBtn(false);\n        let vendor = {...data, edit: false};\n        props.addVendor(vendor);\n        setData(defaultData);\n    }\n\n    function checkData() {\n        return data.edit &&\n            data.score > 0 &&\n            data.icon.length > 0 &&\n            data.description.length > 0 &&\n            data.history.length > 0 &&\n            data.founded.length > 0 &&\n            data.investors.length > 0 &&\n            data.founders.length > 0\n    }\n\n    function setItemData(event, currentType, currentKey) {\n        if (redact && key === currentKey) {\n            setRedact(false);\n            setType('');\n            setKey('');\n        } else {\n            setRedact(true);\n            setKey(currentKey);\n            setType(currentType);\n        }\n    }\n\n    function setChangedItemData(value) {\n        setData({...data, [key]: value});\n    }\n\n    function showRedact() {\n        let input = '';\n\n        switch (type) {\n            case \"number\":\n                input = <InputNumber min={0} max={10} step={0.1} size=\"small\" value={data[key]} onChange={value => setChangedItemData(value)} />;\n                break;\n            case \"text\":\n                input = <Input className=\"input\" size=\"small\" value={data[key]} onChange={ e => setChangedItemData(e.target.value)}/>;\n                break;\n            case \"textarea\":\n                input = <TextArea className=\"input\" size=\"small\" value={data[key]} onChange={e => setChangedItemData(e.target.value)}/>;\n                break;\n            default:\n                input = <></>;\n                break;\n        }\n\n        return (\n            <div className=\"redactor\">\n                {input}\n            </div>\n        );\n    }\n\n    function showImgContent() {\n        return (\n                <>\n                    {\n                        data.icon.length > 0 ? image() : emptyImage()\n                    }\n                    {\n                        newVendorBtn && checkData() ?\n                            addVendorBtn()\n                            :\n                            <div className=\"empty-space\"></div>\n                    }\n                </>\n        );\n    }\n\n    function formatToPercent(score) {\n        return parseFloat(score) * 10;\n    }\n\n    return (\n        <div className=\"vendor-item\">\n            <div className=\"vendor-icon-content\" onMouseMove={() => setNewVendorBtn(true)} onMouseLeave={() => setNewVendorBtn(false)}>\n                {\n                    redact && data.edit ? showRedact() : showImgContent()\n                }\n            </div>\n            <div className=\"vendor-data-content\">\n                {\n                    data.edit ? <>\n                        <div className=\"item item-score\"\n                             onClick={event => setItemData(event, 'number', 'score')}>Overall Score</div>\n                        <div className=\"item item-description\"\n                             onClick={event => setItemData(event, 'textarea', 'description')}>Product Description</div>\n                        <div className=\"item item-history\" onClick={event => setItemData(event, 'textarea', 'history')}>Funding History</div>\n                        <div className=\"item item-founded\" onClick={event => setItemData(event, 'text', 'founded')}>Founded</div>\n                        <div className=\"item item-investors\" onClick={event => setItemData(event, 'text', 'investors')}>Key Investors</div>\n                        <div className=\"item item-founders\" onClick={event => setItemData(event, 'text', 'founders')}>Founders</div>\n                    </> : <>\n                        <div className=\"item item-score\">\n                            <Progress width={18} strokeColor={{\n                                from: '#108ee9',\n                                to: '#87d068',\n                            }}\n                                      percent={formatToPercent(data.score)}\n                                      format={percent => percent}\n                                      type=\"circle\"\n                            />\n                        </div>\n                        <div className=\"item item-description\">{data.description}</div>\n                        <div className=\"item item-history\">{data.history}</div>\n                        <div className=\"item item-founded\">{data.founded}</div>\n                        <div className=\"item item-investors\">{data.investors}</div>\n                        <div className=\"item item-founders\">{data.founders}</div>\n                    </>\n                }\n            </div>\n        </div>\n    );\n}","import React, {useState} from \"react\";\nimport {Row, Space} from \"antd\";\nimport Vendor from \"./vendor\";\n\nconst emptyVendorData = require('./vendor/emptyVendor.json');\nconst vendorData = emptyVendorData;\n\nfunction setDefaultVendor() {\n    return [vendorData];\n}\n\nfunction VendorRow() {\n    const [vendors, setVendor] = useState(() => {\n        return setDefaultVendor();\n    });\n\n    function addVendor(vendor) {\n        setVendor([...vendors, vendor]);\n    }\n\n    return (\n        <Row>\n            <Space direction=\"horizontal\">\n                {\n                    vendors.map((vendor, index) => <Vendor key={index} vendor={vendor} addVendor={addVendor}></Vendor>)\n                }\n            </Space>\n        </Row>\n    );\n}\n\nexport default VendorRow;","import React, {useState} from \"react\";\nimport AddCriteria from \"./criteria/AddCriteria\";\nimport VendorRow from \"./vendorRow\";\nimport {Row, Col} from \"antd\";\n\nexport default function ContentData() {\n    const [rows, setRows] = useState([1]);\n\n    function addRow() {\n        setRows([...rows, 1]);\n    }\n\n    return (\n        <Row>\n            <Col span={22} offset={1}>\n                <AddCriteria addRow={addRow}></AddCriteria>\n                {\n                    rows.map((value, index) => <VendorRow key={index}></VendorRow>)\n                }\n            </Col>\n        </Row>\n);\n}\n","import React from 'react';\nimport ContentData from \"./components/ContentData\";\n\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nfunction App() {\n  return (<ContentData></ContentData>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}